<% content_for :page_title do %>
	<span class="page_title">Find IDs <span class="supplement">of terms</span></span>
<% end %>

<fieldset>
	<legend>Demo</legend>
	<%= form_tag 'find_ids', id: 'find_ids', method: :get do -%>
		<%= text_area_tag :label, params[:label], required: true, placeholder: "a label or a list of labels (comma(','), or newline-delimited)" %>
		<div class="center-align">
			<%= render 'lookup/options_surface_similarity' %>
			<%= render 'lookup/options_semantic_similarity' %>
			<%= render 'lookup/options_filtering' %>
			<%= render 'lookup/options_output' %>
		</div>

		<textarea id="dictionaries" name="dictionaries" style="display:none"></textarea>

		<div class="center-align">
			<%= submit_tag 'Submit', class: :button %>
			<%= button_tag 'Reset', type: :reset, id: :reset, class: :button %>
		</div>
	<% end %>

	<% unless @result.nil? || @result.empty? %>
		<h2>Result</h2>
		<pre style="border: 1px solid black"><%= JSON.pretty_generate @result %></pre>
	<% end %>
</fieldset>

<fieldset>
	<legend>Dictionary Selection</legend>
	<%= render partial: 'dictionaries/dictionary_selection' %>
</fieldset>

<fieldset>
	<legend>REST API for lookup</legend>

	<table>
	<tr>
	<td><span class='http_method'>GET</span>|<span class='http_method'>POST</span></td>
	<td><div id="rest_url"></div></td>
	<td>
	<button class="btn" id="clip-btn-url" data-clipboard-action="copy" data-clipboard-target="#rest_url">
		<%= image_tag 'clippy.svg', class: 'clippy', width: 13, alt: 'Copy to clipboard', title: 'Copy to clipboard' %>
	</button>
	</td>
	</tr>
	</table>

	<h2>Example cURL command</h2>
	<table>

	<tr>
	<th>1</th>
	<td style="text-align:center"><span class='http_method'>GET</span></td>
	<td><div id="curl_command_get"></div></td>
	<td>
		<button class="btn" id="clip-btn-get" data-clipboard-action="copy" data-clipboard-target="#curl_command_get">
			<%= image_tag 'clippy.svg', class: 'clippy', width: 13, alt: 'Copy to clipboard' %>
		</button>
	</td>
	</tr>

	<tr>
	<th>2</th>
	<td><span class='http_method'>POST</span></td>
	<td><div id="curl_command_post1"></div></td>
	<td>
		<button class="btn" id="clip-btn-post1" data-clipboard-action="copy" data-clipboard-target="#curl_command_post1">
			<%= image_tag 'clippy.svg', class: 'clippy', width: 13, alt: 'Copy to clipboard' %>
		</button>
	</td>
	</tr>

	<tr>
	<th>3</th>
	<td><span class='http_method'>POST</span></td>
	<td><div id="curl_command_post2"></div></td>
	<td>
		<button class="btn" id="clip-btn-post2" data-clipboard-action="copy" data-clipboard-target="#curl_command_post2">
			<%= image_tag 'clippy.svg', class: 'clippy', width: 13, alt: 'Copy to clipboard' %>
		</button>
	</td>
	</tr>

	<tr>
	<th>4</th>
	<td><span class='http_method'>POST</span></td>
	<td><div id="curl_command_post3"></div></td>
	<td>
		<button class="btn" id="clip-btn-post3" data-clipboard-action="copy" data-clipboard-target="#curl_command_post3">
			<%= image_tag 'clippy.svg', class: 'clippy', width: 13, alt: 'Copy to clipboard' %>
		</button>
	</td>
	</tr>

	</table>

	<ul class="note">
		<li>In the case of 1, 2 and 3, <i>comma</i> (',') can be used to delimit multiple labels.</li>
		<li>In the case of 4, the <i>newline</i> letter also can be used to delimit multiple labels, which is convenient to read labels from a file. For a more detail, you are recommended to read the manual of curl.</li>
	</ul>
</fieldset>

<script type="text/javascript">
	$(function() {
		dictionarySelectionInit();
		set_url();

		var clipboard_url   = new Clipboard('#clip-btn-url');
		var clipboard_get   = new Clipboard('#clip-btn-get');
		var clipboard_post1 = new Clipboard('#clip-btn-post1');
		var clipboard_post2 = new Clipboard('#clip-btn-post2');
		var clipboard_post3 = new Clipboard('#clip-btn-post3');
	});

	$('#dictionaries').change(function() {
		set_url();
	});

	$("#use_ngram_similarity").change(function() {
		set_url();
	});

	$('#threshold').change(function() {
		set_url();
	});

	$("#use_semantic_similarity").change(function() {
		set_url();
	});

	$('#semantic_threshold').change(function() {
		set_url();
	});

	$("#superfluous").change(function() {
		set_url();
	});

	$("#verbose").change(function() {
		set_url();
	});

	$("#tags").change(function() {
		set_url();
	});

	$("#label").on('input', function() {
		set_url();
	});

	$('#find_ids').on('reset', function(e)
	{
		setTimeout(function() {
			dictionarySelectionReset();
			set_url();
		}, 0);
	});

	function set_url() {
		var params = [];

		var dictionaries = $('#dictionaries').text();
		if (dictionaries) {
			var param_dics = 'dictionary=' + dictionaries;
			params.push(param_dics);
		}

		var tags = $('#tags').val();
		if (tags) {
			var param = 'tags=' + tags;
			params.push(param);
		}

		var use_ngram_similarity = $('#use_ngram_similarity').is(':checked');
		var default_use_ngram_similarity = <%= TextAnnotator::OPTIONS_DEFAULT[:use_ngram_similarity] %>;
		if (use_ngram_similarity != default_use_ngram_similarity) {
			var param = 'use_ngram_similarity=' + use_ngram_similarity;
			params.push(param);
		}

		var threshold = $('#threshold').val();
		var default_threshold = <%= TextAnnotator::OPTIONS_DEFAULT[:threshold] %>;
		if (threshold && threshold != default_threshold) {
			var param = 'threshold=' + threshold;
			params.push(param);
		}

		var use_semantic_similarity = $('#use_semantic_similarity').is(':checked');
		var semantic_threshold = $('#semantic_threshold').val();
		if (use_semantic_similarity && semantic_threshold) {
			var param = 'semantic_threshold=' + semantic_threshold;
			params.push(param);
		}

		var superfluous = $('#superfluous').is(':checked');
		var default_superfluous = <%= TextAnnotator::OPTIONS_DEFAULT[:superfluous] %>;
		if (superfluous != default_superfluous) {
			var param = 'superfluous=' + superfluous;
			params.push(param);
		}

		var verbose = $('#verbose').is(':checked');
		var default_verbose = <%= TextAnnotator::OPTIONS_DEFAULT[:verbose] %>;
		if (verbose != default_verbose) {
			var param = 'verbose=' + verbose;
			params.push(param);
		}

		var url = '<%= root_url %>find_ids.json';
		if (params.length > 0) {url += '?' + params.join('&')}
		$('#rest_url').text(url);

		var label = $('#label').val() || 'label1,label2';
		var labelCsv = label.split(/[\n,]/).map(s => s.trim()).filter(s => s).join(',');

		var command_get   = 'curl -G --data-urlencode label="' + labelCsv + '" "' + url + '"';
		var command_post1 = 'curl -d label="' + labelCsv + '" "' + url + '"';
		var command_post2 = 'curl -H "content-type:text/csv" -d "' + labelCsv + '" "' + url + '"';
		var command_post3 = 'curl -H "content-type:text/csv" --data-binary @filename "' + url + '"';

		$('#curl_command_get').text(command_get);
		$('#curl_command_post1').text(command_post1);
		$('#curl_command_post2').text(command_post2);
		$('#curl_command_post3').text(command_post3);
	}
</script>
